generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  password     String
  description  String?
  profileImage String?
  updatedAt    DateTime @default(now()) // 기본값 추가
  createdAt    DateTime @default(now())
  friendA      Friend[] @relation("UserFriendA")
  friendB      Friend[] @relation("UserFriendB")
  Diary        Diary[]

  // 사용자와 Refresh Token 간의 일대다 관계 설정
  refreshTokens RefreshToken[]

  favorites   Favorite[]
  comments    Comment[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 사용자와의 관계 정의
  user User @relation(fields: [userId], references: [id])
}

model Friend {
  id      String  @id @default(uuid())
  userA   User    @relation("UserFriendA", fields: [userAId], references: [id])
  userAId String
  userB   User    @relation("UserFriendB", fields: [userBId], references: [id])
  userBId String
  status  Boolean @default(false)

  @@unique([userAId, userBId])
}

model Diary {
  id          String   @id @default(uuid())
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  createdDate DateTime
  title       String
  content     String
  is_public   String
  emoji       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  favorites   Favorite[]
  comments    Comment[]
}

model Favorite {
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  diary      Diary      @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  diaryId    String     @map("diary_id") 
  userId     String     @map("user_id")
  @@id([diaryId, userId])
}

model Comment {
  id          String   @id @default(uuid())   
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  diary       Diary    @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  diaryId     String
  content     String
  nestedComment  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}